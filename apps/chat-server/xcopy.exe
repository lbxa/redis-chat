# Custom `GraphileBuild.Inflection` Reference

This reference was autogenerated by `graphile inflection list` using your
local configuration file to determine the inflectors that are available based
on the plugins and presets you use. You should regenerate it from time to time
(for example, when you upgrade a module, or add/remove modules).

```ts
interface GraphileBuild.Inflection {
  /** The base inflector used by allInterfaceModeUnionRowsConnection and all… */
  _allInterfaceModeUnionRows(codec): string
  /** The base inflector used by `allRowsConnection` and `allRowsList`. */
  _allRows(resource): string
  /** Given a attributeName on a PgCodec's attributes, should return the fie… */
  _attributeName(details): string
  /** A PgCodec may represent any of a wide range of PostgreSQL types; this … */
  _codecName(codec): string
  _functionName(details): string
  /** Takes a codec and the list of attribute names from that codec and turn… */
  _joinAttributeNames(codec, names): string
  _manyRelation(details): string
  _manyRelationRaw(details): string
  /** A PgResource represents a single way of getting a number of values of … */
  _resourceName(resource): string
  /** When you're using multiple databases and/or schemas, you may want to p… */
  _schemaPrefix(details): string
  _singleRelationBackwardsRaw(details): string
  _singleRelationRaw(details): string
  /** Takes a `_codecName` and singularizes it. This is also a good place to… */
  _singularizedCodecName(codec): string
  /** Takes a `_sourceName` and singularizes it. */
  _singularizedResourceName(resource): string
  /** The field name for a Cursor Connection field that returns all rows fro… */
  allInterfaceModeUnionRowsConnection(codec): string
  /** The field name for a List field that returns all rows from the given `… */
  allInterfaceModeUnionRowsList(codec): string
  /** The field name for a Cursor Connection field that returns all rows fro… */
  allRowsConnection(resource): string
  /** The field name for a List field that returns all rows from the given r… */
  allRowsList(resource): string
  argument(details): string
  /** The field name for a given attribute on that pg_class' table type. May… */
  attribute(details): string
  baseInputType(typeName): string
  /** Built-in names (allows you to override these in the output schema) e.g… */
  builtin(name): string
  camelCase: (text) => string
  classCodecName(details): string
  /** Try and make something a valid GraphQL 'Name'. Name is defined in Grap… */
  coerceToGraphQLName(name): string
  computedAttributeConnectionField(details): string
  computedAttributeField(details): string
  computedAttributeListField(details): string
  computedAttributeOrder(details): string
  conditionType(typeName): string (+1 overload)
  /** The name of a field that returns a connection */
  connectionField(baseName): string
  /** Take a type name and return the connection type name */
  connectionType(typeName): string
  constantCase: (text) => string
  createField(resource): string
  createInputType(resource): string
  createPayloadType(resource): string
  customMutationField(details): string
  customMutationInput(details): string
  customMutationPayload(details): string
  customQueryConnectionField(details): string
  customQueryField(details): string
  customQueryListField(details): string
  deleteByKeysField(details): string
  deleteByKeysInputType(details): string
  deletedNodeId(details): string
  deleteNodeField(details): string
  deleteNodeInputType(details): string
  deletePayloadType(details): string
  /** Appends '_record' to a name that ends in `_input`, `_patch`, `Input` o… */
  dontEndInInputOrPatch(text): string
  /** Take a type name and return the edge type name */
  edgeType(typeName): string
  /** Name of the _codec_ used to represent an enum table as an enum. You pr… */
  enumTableCodec(details): string
  /** Name of the _GraphQL enum_ used to represent an enum table in the sche… */
  enumTableEnum(details): string
  enumType(codec): string
  enumValue(value, codec): string
  functionMutationResultFieldName(details): string
  functionRecordReturnCodecName(details): string
  functionResourceName(details): string
  /** Given the name of a GraphQL output type, what name should we use for t… */
  inputType(typeName): string
  /** The name of a field that returns a list */
  listField(baseName): string
  manyRelationConnection(details): string
  manyRelationList(details): string
  nodeById(typeName): string
  /** The name of the attribute used as an `ID` input representing a related… */
  nodeIdAttribute(details): string
  nodeIdFieldName(): string
  orderByAttributeEnum(details): string
  orderByType(typeName): string
  patchField(fieldName): string
  patchType(typeName): string
  pluralize: (text) => string
  rangeBoundType(input): string
  rangeType(input): string
  recordFunctionConnectionType(details): string
  recordFunctionEdgeType(details): string
  resourceRelationName(details): string
  rowByUnique(details): string
  scalarCodecTypeName(codec): string
  scalarFunctionConnectionType(details): string
  scalarFunctionEdgeType(details): string
  singleRelation(details): string
  singleRelationBackwards(details): string
  singularize: (text) => string
  tableConnectionType(codec): string
  tableEdgeField(codec): string
  tableEdgeType(codec): string
  tableFieldName(resource): string
  /** The name of the PgResource for a table/class */
  tableResourceName(details): string
  /** The name of the GraphQL Object Type that's generated to represent a sp… */
  tableType(codec): string
  typeCodecName(details): string
  updateByKeysField(details): string
  updateByKeysInputType(details): string
  updateNodeField(details): string
  updateNodeInputType(details): string
  updatePayloadType(details): string
  upperCamelCase: (text) => string
}
```

## _allInterfaceModeUnionRows

The base inflector used by allInterfaceModeUnionRowsConnection and
allInterfaceModeUnionRowsList.

```ts
_allInterfaceModeUnionRows(codec: PgCodec): string
```

## _allRows

The base inflector used by `allRowsConnection` and `allRowsList`.

```ts
_allRows(resource: PgResource<any, any, any, any, any>): string
```

## _attributeName

Given a attributeName on a PgCodec's attributes, should return the field
name to use to represent this attribute (both for input and output).

```ts
_attributeName(details: {
    codec: PgCodecWithAttributes;
    attributeName: string;
    skipRowId?: boolean;
}): string
```

## _codecName

A PgCodec may represent any of a wide range of PostgreSQL types;
this inflector gives a name to this codec, it's primarily used when
naming _types_ in the GraphQL schema (as opposed to `_sourceName`
which typically names _fields_).

```ts
_codecName(codec: PgCodec<any, any, any, any, any, any, any>): string
```

## _functionName

```ts
_functionName(details: GraphileBuild.InflectionCustomFieldProcedureDetails): string
```

## _joinAttributeNames

Takes a codec and the list of attribute names from that codec and turns
it into a joined list.

```ts
_joinAttributeNames(codec: PgCodecWithAttributes, names: readonly string[]): string
```

## _manyRelation

```ts
_manyRelation(details: GraphileBuild.PgRelationsPluginRelationDetails): string
```

## _manyRelationRaw

```ts
_manyRelationRaw(details: GraphileBuild.PgRelationsPluginRelationDetails): string
```

## _resourceName

A PgResource represents a single way of getting a number of values of
`resource.codec` type. It doesn't necessarily represent a table directly
(although it can) - e.g. it might be a function that returns records
from a table, or it could be a "sub-selection" of a table, e.g.
"admin_users" might be "users where admin is true".  This inflector
gives a name to this resource, it's primarily used when naming _fields_
in the GraphQL schema (as opposed to `_codecName` which typically
names _types_.

```ts
_resourceName(resource: PgResource<any, any, any, any, any>): string
```

## _schemaPrefix

When you're using multiple databases and/or schemas, you may want to
prefix various type names/field names with an identifier for these
DBs/schemas.

```ts
_schemaPrefix(details: {
    serviceName: string;
    pgNamespace: PgNamespace;
}): string
```

## _singleRelationBackwardsRaw

```ts
_singleRelationBackwardsRaw(details: GraphileBuild.PgRelationsPluginRelationDetails): string
```

## _singleRelationRaw

```ts
_singleRelationRaw(details: GraphileBuild.PgRelationsPluginRelationDetails): string
```

## _singularizedCodecName

Takes a `_codecName` and singularizes it. This is also a good place to
try and avoid potential conflicts, e.g. for a table `foo` a `Foo` and
`FooInput` and `FooPatch` type might be generated. So a `foo_input`
table could potentially cause conflicts. The default inflector would
turn `foo_input` into `FooInputRecord`.

```ts
_singularizedCodecName(codec: PgCodec<any, any, any, any, any, any, any>): string
```

## _singularizedResourceName

Takes a `_sourceName` and singularizes it.

```ts
_singularizedResourceName(resource: PgResource<any, any, any, any, any>): string
```

## allInterfaceModeUnionRowsConnection

The field name for a Cursor Connection field that returns all rows
from the given `@interface mode:union` codec.

```ts
allInterfaceModeUnionRowsConnection(codec: PgCodec): string
```

## allInterfaceModeUnionRowsList

The field name for a List field that returns all rows from the given
`@interface mode:union` codec.

```ts
allInterfaceModeUnionRowsList(codec: PgCodec): string
```

## allRowsConnection

The field name for a Cursor Connection field that returns all rows
from the given resource.

```ts
allRowsConnection(resource: PgResource<any, any, any, any, any>): string
```

## allRowsList

The field name for a List field that returns all rows from the given
resource.

```ts
allRowsList(resource: PgResource<any, any, any, any, any>): string
```

## argument

```ts
argument(details: GraphileBuild.InflectionCustomFieldArgumentDetails): string
```

## attribute

The field name for a given attribute on that pg_class' table type. May
also be used in other places (e.g. the Input or Patch type associated
with the table).

```ts
attribute(details: {
    attributeName: string;
    codec: PgCodecWithAttributes;
}): string
```

## baseInputType

```ts
baseInputType(typeName: string): string
```

## builtin

Built-in names (allows you to override these in the output schema)

e.g.:

graphile-build:

- Query
- Mutation
- Subscription
- Node
- PageInfo
- ...

graphile-build-pg:

- Interval
- BigInt
- BigFloat
- BitString
- Point
- Date
- Datetime
- Time
- JSON
- UUID
- InternetAddress
- ...

Other plugins may add their own builtins too; try and avoid conflicts!

```ts
builtin(name: string): string
```

## camelCase

```ts
camelCase: (text: string) => string
```

## classCodecName

```ts
classCodecName(details: {
    pgClass: PgClass;
    serviceName: string;
}): string
```

## coerceToGraphQLName

Try and make something a valid GraphQL 'Name'.

Name is defined in GraphQL to match this regexp:

    /^[_A-Za-z][_0-9A-Za-z]*$/

See: https://graphql.github.io/graphql-spec/June2018/#sec-Appendix-Grammar-Summary.Lexical-Tokens

```ts
coerceToGraphQLName(name: string): string
```

## computedAttributeConnectionField

```ts
computedAttributeConnectionField(details: GraphileBuild.InflectionCustomFieldProcedureDetails): string
```

## computedAttributeField

```ts
computedAttributeField(details: GraphileBuild.InflectionCustomFieldProcedureDetails): string
```

## computedAttributeListField

```ts
computedAttributeListField(details: GraphileBuild.InflectionCustomFieldProcedureDetails): string
```

## computedAttributeOrder

```ts
computedAttributeOrder(details: {
    resource: PgResource<any, any, any, readonly PgResourceParameter[], any>;
    variant: "asc" | "desc" | "asc_nulls_last" | "desc_nulls_last";
}): string
```

## conditionType

```ts
conditionType(typeName: string): string (+1 overload)
```

## connectionField

The name of a field that returns a connection

```ts
connectionField(baseName: string): string
```

## connectionType

Take a type name and return the connection type name

```ts
connectionType(typeName: string): string
```

## constantCase

```ts
constantCase: (text: string) => string
```

## createField

```ts
createField(resource: PgResource<any, any, any, any, any>): string
```

## createInputType

```ts
createInputType(resource: PgResource<any, any, any, any, any>): string
```

## createPayloadType

```ts
createPayloadType(resource: PgResource<any, any, any, any, any>): string
```

## customMutationField

```ts
customMutationField(details: GraphileBuild.InflectionCustomFieldProcedureDetails): string
```

## customMutationInput

```ts
customMutationInput(details: GraphileBuild.InflectionCustomFieldProcedureDetails): string
```

## customMutationPayload

```ts
customMutationPayload(details: GraphileBuild.InflectionCustomFieldProcedureDetails): string
```

## customQueryConnectionField

```ts
customQueryConnectionField(details: GraphileBuild.InflectionCustomFieldProcedureDetails): string
```

## customQueryField

```ts
customQueryField(details: GraphileBuild.InflectionCustomFieldProcedureDetails): string
```

## customQueryListField

```ts
customQueryListField(details: GraphileBuild.InflectionCustomFieldProcedureDetails): string
```

## deleteByKeysField

```ts
deleteByKeysField(details: {
    resource: PgResource<any, any, any, any, any>;
    unique: PgResourceUnique;
}): string
```

## deleteByKeysInputType

```ts
deleteByKeysInputType(details: {
    resource: PgResource<any, any, any, any, any>;
    unique: PgResourceUnique;
}): string
```

## deletedNodeId

```ts
deletedNodeId(details: {
    resource: PgResource<any, any, any, any, any>;
}): string
```

## deleteNodeField

```ts
deleteNodeField(details: {
    resource: PgResource<any, any, any, any, any>;
    unique: PgResourceUnique;
}): string
```

## deleteNodeInputType

```ts
deleteNodeInputType(details: {
    resource: PgResource<any, any, any, any, any>;
    unique: PgResourceUnique;
}): string
```

## deletePayloadType

```ts
deletePayloadType(details: {
    resource: PgResource<any, any, any, any, any>;
}): string
```

## dontEndInInputOrPatch

Appends '_record' to a name that ends in `_input`, `_patch`, `Input`
or `Patch` to avoid naming conflicts.

```ts
dontEndInInputOrPatch(text: string): string
```

## edgeType

Take a type name and return the edge type name

```ts
edgeType(typeName: string): string
```

## enumTableCodec

Name of the _codec_ used to represent an enum table as an enum. You
probably want `enumTableEnum` instead.

```ts
enumTableCodec(details: {
    serviceName: string;
    pgClass: PgClass;
    pgConstraint: PgConstraint;
}): string
```

## enumTableEnum

Name of the _GraphQL enum_ used to represent an enum table in the
schema.

```ts
enumTableEnum(details: {
    serviceName: string;
    pgClass: PgClass;
    pgConstraint: PgConstraint;
}): string
```

## enumType

```ts
enumType(codec: PgEnumCodec<string, any>): string
```

## enumValue

```ts
enumValue(value: string, codec: PgEnumCodec<string, any>): string
```

## functionMutationResultFieldName

```ts
functionMutationResultFieldName(details: GraphileBuild.InflectionCustomFieldMutationResult): string
```

## functionRecordReturnCodecName

```ts
functionRecordReturnCodecName(details: {
    serviceName: string;
    pgProc: PgProc;
}): string
```

## functionResourceName

```ts
functionResourceName(details: {
    serviceName: string;
    pgProc: PgProc;
}): string
```

## inputType

Given the name of a GraphQL output type, what name should we use for the
equivalent input type?

```ts
inputType(typeName: string): string
```

## listField

The name of a field that returns a list

```ts
listField(baseName: string): string
```

## manyRelationConnection

```ts
manyRelationConnection(details: GraphileBuild.PgRelationsPluginRelationDetails): string
```

## manyRelationList

```ts
manyRelationList(details: GraphileBuild.PgRelationsPluginRelationDetails): string
```

## nodeById

```ts
nodeById(typeName: string): string
```

## nodeIdAttribute

The name of the attribute used as an `ID` input representing a related
record ultimately representing the underlying keys.

```ts
nodeIdAttribute(details: {
    registry: PgRegistry;
    codec: PgCodecWithAttributes;
    relationName: string;
}): string
```

## nodeIdFieldName

```ts
nodeIdFieldName(): string
```

## orderByAttributeEnum

```ts
orderByAttributeEnum(details: {
    codec: PgCodecWithAttributes;
    attributeName: string;
    variant: "asc" | "desc" | "asc_nulls_last" | "desc_nulls_last";
}): string
```

## orderByType

```ts
orderByType(typeName: string): string
```

## patchField

```ts
patchField(fieldName: string): string
```

## patchType

```ts
patchType(typeName: string): string
```

## pluralize

```ts
pluralize: (text: string) => string
```

## rangeBoundType

```ts
rangeBoundType(input: {
    codec: PgCodecAnyScalar;
    underlyingTypeName: string;
}): string
```

## rangeType

```ts
rangeType(input: {
    codec: PgCodecAnyScalar;
    underlyingTypeName: string;
}): string
```

## recordFunctionConnectionType

```ts
recordFunctionConnectionType(details: GraphileBuild.InflectionCustomFieldProcedureDetails): string
```

## recordFunctionEdgeType

```ts
recordFunctionEdgeType(details: GraphileBuild.InflectionCustomFieldProcedureDetails): string
```

## resourceRelationName

```ts
resourceRelationName(details: {
    serviceName: string;
    pgConstraint: PgConstraint;
    localClass: PgClass;
    localAttributes: PgAttribute[];
    foreignClass: PgClass;
    foreignAttributes: PgAttribute[];
    isUnique: boolean;
    isReferencee: boolean;
}): string
```

## rowByUnique

```ts
rowByUnique(details: {
    unique: PgResourceUnique;
    resource: PgResource<any, any, any, any, any>;
}): string
```

## scalarCodecTypeName

```ts
scalarCodecTypeName(codec: PgCodecAnyScalar): string
```

## scalarFunctionConnectionType

```ts
scalarFunctionConnectionType(details: GraphileBuild.InflectionCustomFieldProcedureDetails): string
```

## scalarFunctionEdgeType

```ts
scalarFunctionEdgeType(details: GraphileBuild.InflectionCustomFieldProcedureDetails): string
```

## singleRelation

```ts
singleRelation(details: GraphileBuild.PgRelationsPluginRelationDetails): string
```

## singleRelationBackwards

```ts
singleRelationBackwards(details: GraphileBuild.PgRelationsPluginRelationDetails): string
```

## singularize

```ts
singularize: (text: string) => string
```

## tableConnectionType

```ts
tableConnectionType(codec: PgCodec<any, any, any, any, any, any, any>): string
```

## tableEdgeField

```ts
tableEdgeField(codec: PgCodecWithAttributes): string
```

## tableEdgeType

```ts
tableEdgeType(codec: PgCodec<any, any, any, any, any, any, any>): string
```

## tableFieldName

```ts
tableFieldName(resource: PgResource<any, any, any, any, any>): string
```

## tableResourceName

The name of the PgResource for a table/class

```ts
tableResourceName(details: {
    serviceName: string;
    pgClass: PgClass;
}): string
```

## tableType

The name of the GraphQL Object Type that's generated to represent a
specific table (more specifically a PostgreSQL "pg_class" which is
represented as a certain PgCodec)

```ts
tableType(codec: PgCodec<any, any, any, any, any, any, any>): string
```

## typeCodecName

```ts
typeCodecName(details: {
    pgType: PgType;
    serviceName: string;
}): string
```

## updateByKeysField

```ts
updateByKeysField(details: {
    resource: PgResource<any, any, any, any, any>;
    unique: PgResourceUnique;
}): string
```

## updateByKeysInputType

```ts
updateByKeysInputType(details: {
    resource: PgResource<any, any, any, any, any>;
    unique: PgResourceUnique;
}): string
```

## updateNodeField

```ts
updateNodeField(details: {
    resource: PgResource<any, any, any, any, any>;
    unique: PgResourceUnique;
}): string
```

## updateNodeInputType

```ts
updateNodeInputType(details: {
    resource: PgResource<any, any, any, any, any>;
    unique: PgResourceUnique;
}): string
```

## updatePayloadType

```ts
updatePayloadType(details: {
    resource: PgResource<any, any, any, any, any>;
}): string
```

## upperCamelCase

```ts
upperCamelCase: (text: string) => string
```

